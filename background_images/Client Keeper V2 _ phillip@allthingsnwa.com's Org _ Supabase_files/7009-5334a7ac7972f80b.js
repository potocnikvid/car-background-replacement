"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7009],{19719:function(e,t,s){s.d(t,{V$:function(){return i},cr:function(){return u},j5:function(){return c},sU:function(){return o}});var n=s(28879),a=s.n(n),r=s(877);let i=24,o=[{text:"Last 24 hours",calcFrom:()=>a()().subtract(1,"day").startOf("day").toISOString(),calcTo:()=>"",default:!0},{text:"Last 7 days",calcFrom:()=>a()().subtract(7,"day").startOf("day").toISOString(),calcTo:()=>""},{text:"Last 14 days",calcFrom:()=>a()().subtract(14,"day").startOf("day").toISOString(),calcTo:()=>""},{text:"Last 30 days",calcFrom:()=>a()().subtract(30,"day").startOf("day").toISOString(),calcTo:()=>""}],c={iso_timestamp_start:o[0].calcFrom(),iso_timestamp_end:o[0].calcTo()},l=function(e){let t=!(arguments.length>1)||void 0===arguments[1]||arguments[1];if(0===e.length)return"";let s=e.map(e=>{let t=e.key.split("."),s=[t[t.length-2],t[t.length-1]].join("."),n=e.key.includes(".")?s:e.key;return"matches"===e.compare?"REGEXP_CONTAINS(".concat(n,", '").concat(e.value,"')"):"is"===e.compare?"".concat(n," = ").concat(e.value):void 0}).join(" AND ");return t?"WHERE "+s:"AND "+s},u={[r.s.API]:{title:"API",queries:{totalRequests:{queryType:"logs",sql:e=>"\n        select\n          cast(timestamp_trunc(t.timestamp, hour) as datetime) as timestamp,\n          count(t.id) as count\n        FROM edge_logs t\n          cross join unnest(metadata) as m\n          cross join unnest(m.response) as response\n          cross join unnest(m.request) as request\n          cross join unnest(request.headers) as headers\n          ".concat(l(e),"\n        GROUP BY\n          timestamp\n        ORDER BY\n          timestamp ASC")},topRoutes:{queryType:"logs",sql:e=>"\n        select\n          request.path as path,\n          request.method as method,\n          request.search as search,\n          response.status_code as status_code,\n          count(t.id) as count\n        from edge_logs t\n          cross join unnest(metadata) as m\n          cross join unnest(m.response) as response\n          cross join unnest(m.request) as request\n          cross join unnest(request.headers) as headers\n          ".concat(l(e),"\n        group by\n          request.path, request.method, request.search, response.status_code\n        order by\n          count desc\n        limit 10\n        ")},errorCounts:{queryType:"logs",sql:e=>"\n        select\n          cast(timestamp_trunc(t.timestamp, hour) as datetime) as timestamp,\n          count(t.id) as count\n        FROM edge_logs t\n          cross join unnest(metadata) as m\n          cross join unnest(m.response) as response\n          cross join unnest(m.request) as request\n          cross join unnest(request.headers) as headers\n        WHERE\n          response.status_code >= 400\n        ".concat(l(e,!1),"\n        GROUP BY\n          timestamp\n        ORDER BY\n          timestamp ASC\n        ")},topErrorRoutes:{queryType:"logs",sql:e=>"\n        select\n          request.path as path,\n          request.method as method,\n          request.search as search,\n          response.status_code as status_code,\n          count(t.id) as count\n        from edge_logs t\n          cross join unnest(metadata) as m\n          cross join unnest(m.response) as response\n          cross join unnest(m.request) as request\n          cross join unnest(request.headers) as headers\n        where\n          response.status_code >= 400\n        ".concat(l(e,!1),"\n        group by\n          request.path, request.method, request.search, response.status_code\n        order by\n          count desc\n        limit 10\n        ")},responseSpeed:{queryType:"logs",sql:e=>"\n        select\n          cast(timestamp_trunc(t.timestamp, hour) as datetime) as timestamp,\n          avg(response.origin_time) as avg\n        FROM\n          edge_logs t\n          cross join unnest(metadata) as m\n          cross join unnest(m.response) as response\n          cross join unnest(m.request) as request\n          cross join unnest(request.headers) as headers\n          ".concat(l(e),"\n        GROUP BY\n          timestamp\n        ORDER BY\n          timestamp ASC\n      ")},topSlowRoutes:{queryType:"logs",sql:e=>"\n        select\n          request.path as path,\n          request.method as method,\n          request.search as search,\n          response.status_code as status_code,\n          count(t.id) as count,\n          avg(response.origin_time) as avg\n        from edge_logs t\n          cross join unnest(metadata) as m\n          cross join unnest(m.response) as response\n          cross join unnest(m.request) as request\n          cross join unnest(request.headers) as headers\n        ".concat(l(e),"\n        group by\n          request.path, request.method, request.search, response.status_code\n        order by\n          avg desc\n        limit 10\n        ")},networkTraffic:{queryType:"logs",sql:e=>'\n        select\n          cast(timestamp_trunc(t.timestamp, hour) as datetime) as timestamp,\n          coalesce(\n            safe_divide(\n              sum(\n                cast(coalesce(headers.content_length, "0") as int64)\n              ),\n              1000000\n            ),\n            0\n          ) as ingress_mb,\n          coalesce(\n            safe_divide(\n              sum(\n                cast(coalesce(resp_headers.content_length, "0") as int64)\n              ),\n              1000000\n            ),\n            0\n          ) as egress_mb,\n        FROM\n          edge_logs t\n          cross join unnest(metadata) as m\n          cross join unnest(m.response) as response\n          cross join unnest(m.request) as request\n          cross join unnest(request.headers) as headers\n          cross join unnest(response.headers) as resp_headers\n          '.concat(l(e),"\n        GROUP BY\n          timestamp\n        ORDER BY\n          timestamp ASC\n        ")}}},[r.s.AUTH]:{title:"",queries:{}},[r.s.STORAGE]:{title:"Storage",queries:{cacheHitRate:{queryType:"logs",sql:e=>"\n-- cache-hit-rate\nSELECT\n  timestamp_trunc(timestamp, hour) as timestamp,\n  countif( h.cf_cache_status in ('HIT', 'STALE', 'REVALIDATED', 'UPDATING') ) as hit_count,\n  countif( h.cf_cache_status in ('MISS', 'NONE/UNKNOWN', 'EXPIRED', 'BYPASS', 'DYNAMIC') ) as miss_count\nfrom edge_logs f\n  cross join unnest(f.metadata) as m\n  cross join unnest(m.request) as r\n  cross join unnest(m.response) as res\n  cross join unnest(res.headers) as h\nwhere starts_with(r.path, '/storage/v1/object') and r.method = 'GET'\ngroup by timestamp\norder by timestamp desc\n"},topCacheMisses:{queryType:"logs",sql:e=>"\n-- top-cache-misses\nSELECT\n  r.path as path,\n  r.search as search,\n  count(id) as count\nfrom edge_logs f\n  cross join unnest(f.metadata) as m\n  cross join unnest(m.request) as r\n  cross join unnest(m.response) as res\n  cross join unnest(res.headers) as h\nwhere starts_with(r.path, '/storage/v1/object') \n  and r.method = 'GET'\n  and h.cf_cache_status in ('MISS', 'NONE/UNKNOWN', 'EXPIRED', 'BYPASS', 'DYNAMIC')\ngroup by path, search\norder by count desc\nlimit 12\n    "}}},[r.s.QUERY_PERFORMANCE]:{title:"Query performance",queries:{mostFrequentlyInvoked:{queryType:"db",sql:(e,t,s)=>"\n-- Most frequently called queries\nset search_path to public, extensions;\n\nselect\n    auth.rolname,\n    statements.query,\n    statements.calls,\n    -- -- Postgres 13, 14, 15\n    statements.total_exec_time + statements.total_plan_time as total_time,\n    statements.min_exec_time + statements.min_plan_time as min_time,\n    statements.max_exec_time + statements.max_plan_time as max_time,\n    statements.mean_exec_time + statements.mean_plan_time as mean_time,\n    -- -- Postgres <= 12\n    -- total_time,\n    -- min_time,\n    -- max_time,\n    -- mean_time,\n    statements.rows / statements.calls as avg_rows\n  from pg_stat_statements as statements\n    inner join pg_authid as auth on statements.userid = auth.oid\n  ".concat(t||"","\n  ").concat(s||"order by statements.calls desc","\n  limit 20;")},mostTimeConsuming:{queryType:"db",sql:(e,t,s)=>"\n-- Most time consuming queries\nset search_path to public, extensions;\n\nselect\n    auth.rolname,\n    statements.query,\n    statements.calls,\n    statements.total_exec_time + statements.total_plan_time as total_time,\n    to_char(((statements.total_exec_time + statements.total_plan_time)/sum(statements.total_exec_time + statements.total_plan_time) OVER()) * 100, 'FM90D0') || '%'  AS prop_total_time\n  from pg_stat_statements as statements\n    inner join pg_authid as auth on statements.userid = auth.oid\n  ".concat(t||"","\n  ").concat(s||"order by total_time desc","\n  limit 20;")},slowestExecutionTime:{queryType:"db",sql:(e,t,s)=>"\n-- Slowest queries by max execution time\nset search_path to public, extensions;\n\nselect\n    auth.rolname,\n    statements.query,\n    statements.calls,\n    -- -- Postgres 13, 14, 15\n    statements.total_exec_time + statements.total_plan_time as total_time,\n    statements.min_exec_time + statements.min_plan_time as min_time,\n    statements.max_exec_time + statements.max_plan_time as max_time,\n    statements.mean_exec_time + statements.mean_plan_time as mean_time,\n    -- -- Postgres <= 12\n    -- total_time,\n    -- min_time,\n    -- max_time,\n    -- mean_time,\n    statements.rows / statements.calls as avg_rows\n  from pg_stat_statements as statements\n    inner join pg_authid as auth on statements.userid = auth.oid\n  ".concat(t||"","\n  ").concat(s||"order by max_time desc","\n  limit 20")},queryHitRate:{queryType:"db",sql:e=>"-- Cache and index hit rate\nselect\n    'index hit rate' as name,\n    (sum(idx_blks_hit)) / nullif(sum(idx_blks_hit + idx_blks_read),0) as ratio\n  from pg_statio_user_indexes\n  union all\n  select\n    'table hit rate' as name,\n    sum(heap_blks_hit) / nullif(sum(heap_blks_hit) + sum(heap_blks_read),0) as ratio\n  from pg_statio_user_tables;"}}},[r.s.DATABASE]:{title:"database",queries:{largeObjects:{queryType:"db",sql:e=>"SELECT \n        SCHEMA_NAME,\n        relname,\n        table_size\n      FROM\n        (SELECT \n          pg_catalog.pg_namespace.nspname AS SCHEMA_NAME,\n          relname,\n          pg_relation_size(pg_catalog.pg_class.oid) AS table_size\n        FROM pg_catalog.pg_class\n        JOIN pg_catalog.pg_namespace ON relnamespace = pg_catalog.pg_namespace.oid\n        ) t\n      WHERE SCHEMA_NAME NOT LIKE 'pg_%'\n      ORDER BY table_size DESC\n      LIMIT 5;"}}}}},877:function(e,t,s){var n,a;s.d(t,{s:function(){return n}}),(a=n||(n={})).API="api",a.STORAGE="storage",a.AUTH="auth",a.QUERY_PERFORMANCE="query_performance",a.DATABASE="database"},75951:function(e,t,s){s.d(t,{B:function(){return c},F2:function(){return u},G2:function(){return p},LZ:function(){return _},Y4:function(){return o},_J:function(){return m},hk:function(){return l},nK:function(){return i},q_:function(){return d}});var n=s(63059),a=s(99248),r=s(28702);let i=660,o=50,c=20,l={...a.S,INIT_READ_REPLICA:"INIT_READ_REPLICA",INIT_READ_REPLICA_FAILED:"INIT_READ_REPLICA_FAILED"},u={SOUTHEAST_ASIA:[103.8,1.37],NORTHEAST_ASIA:[139.42,35.41],NORTHEAST_ASIA_2:[126.98,37.56],CENTRAL_CANADA:[-73.6,45.5],WEST_US:[-121.96,37.35],EAST_US:[-78.45,38.13],WEST_EU:[-8,53],WEST_EU_2:[-.1,51],CENTRAL_EU:[8,50],SOUTH_ASIA:[72.88,19.08],OCEANIA:[151.2,-33.86],SOUTH_AMERICA:[-46.38,-23.34]},m={SOUTHEAST_ASIA:[103.8,1.37]},d=Object.keys(r.Wp).map(e=>({key:e,name:null===r.Wp||void 0===r.Wp?void 0:r.Wp[e].displayName,region:null===r.Wp||void 0===r.Wp?void 0:r.Wp[e].code,coordinates:u[e]})).filter(e=>void 0!==e.coordinates),p={[n.Vb.Requested]:"Requesting replica instance",[n.Vb.Started]:"Launching replica instance",[n.Vb.LaunchedReadReplicaInstance]:"Initiating replica setup",[n.Vb.InitiatedReadReplicaSetup]:"Downloading base backup",[n.Vb.DownloadedBaseBackup]:"Replaying WAL archives",[n.Vb.ReplayedWalArchives]:"Completing set up",[n.Vb.CompletedReadReplicaSetup]:"Completed"},_={[n.Bm.ReadReplicaInstanceLaunchFailed]:"Failed to launch replica",[n.Bm.InitiateReadReplicaSetupFailed]:"Failed to initiate replica",[n.Bm.DownloadBaseBackupFailed]:"Failed to download backup",[n.Bm.ReplayWalArchivesFailed]:"Failed to replay WAL archives",[n.Bm.CompleteReadReplicaSetupFailed]:"Failed to set up replica"}},37962:function(e,t,s){var n=s(52322),a=s(99959),r=s(34291),i=s.n(r),o=s(46252),c=s(78232),l=s(76141),u=s(89404),m=s(39097),d=s.n(m),p=s(5632),_=s(2784),h=s(61786),f=s(32079),g=s(54383),j=s(90504),q=s(19869),x=s(2322),E=s(80435),y=s(75951),A=s(92575),b=s(89523),R=s(9109);t.Z=e=>{var t;let{variant:s="regular",additionalOptions:r=[],onSelectId:m=i()}=e,S=(0,p.useRouter)(),{ref:T}=(0,a.UO)(),[N,I]=(0,_.useState)(!1),v=(0,R.TF)(),O=v.selectedDatabaseId,{data:C,isLoading:w,isSuccess:D}=(0,A.b)({projectRef:T}),k=null!=C?C:[],F=k.sort((e,t)=>e.inserted_at>t.inserted_at?1:0).sort(e=>e.identifier===T?-1:0),L=k.find(e=>e.identifier===O),P=(0,b.f)(null!==(t=null==L?void 0:L.region)&&void 0!==t?t:""),U=(0,b.U)(null!=O?O:""),M=r.find(e=>e.id===O);return(0,n.jsxs)(h.J2,{open:N,onOpenChange:I,modal:!1,children:[(0,n.jsx)(h.xo,{asChild:!0,children:(0,n.jsx)("div",{className:"flex items-center space-x-2 cursor-pointer",children:(0,n.jsxs)(f.z,{type:"default",className:(0,g.cn)("pr-2","connected-on-right"===s&&"rounded-r-none","connected-on-left"===s&&"rounded-l-none border-l-0","connected-on-both"===s&&"rounded-none border-x-0"),icon:w&&(0,n.jsx)(o.Z,{className:"animate-spin"}),iconRight:(0,n.jsx)(c.Z,{className:"text-foreground-light",strokeWidth:2,size:12}),children:["Source:"," ",M?(0,n.jsx)("span",{children:M.name}):(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("span",{className:"capitalize",children:w||(null==L?void 0:L.identifier)===T?"Primary database":"Read replica"})," ",D&&(null==L?void 0:L.identifier)!==T&&(0,n.jsxs)("span",{children:["(",P," - ",U,")"]})]})]})})}),(0,n.jsx)(h.yk,{className:"p-0 w-64",side:"bottom",align:"end",children:(0,n.jsx)(j.mY,{children:(0,n.jsxs)(j.e8,{children:[r.length>0&&(0,n.jsx)(j.fu,{className:"border-b",children:r.map(e=>(0,n.jsx)(j.di,{value:e.id,className:"cursor-pointer w-full",onSelect:()=>{v.setSelectedDatabaseId(e.id),I(!1),m(e.id)},onClick:()=>{v.setSelectedDatabaseId(e.id),I(!1),m(e.id)},children:(0,n.jsxs)("div",{className:"w-full flex items-center justify-between",children:[(0,n.jsx)("p",{children:e.name}),e.id===O&&(0,n.jsx)(l.Z,{size:14})]})},e.id))}),(0,n.jsx)(j.fu,{children:(0,n.jsx)(q.x,{className:(k||[]).length>7?"h-[210px]":"",children:null==F?void 0:F.map(e=>{let t=(0,b.f)(e.region),s=(0,b.U)(e.identifier);if("ACTIVE_HEALTHY"!==e.status){let a=[y.hk.INIT_READ_REPLICA,y.hk.COMING_UP].includes(e.status)?"coming up":"not healthy";return(0,n.jsxs)(x.u,{children:[(0,n.jsx)(x.aJ,{asChild:!0,children:(0,n.jsx)("div",{className:"px-2 py-1.5 w-full flex items-center justify-between",children:(0,n.jsxs)("p",{className:"text-xs text-foreground-lighter",children:["Read replica (",t," - ",s,")"]})})}),(0,n.jsx)(x._v,{side:"right",className:"w-80",children:(0,n.jsx)(E.U,{className:"text-xs text-foreground",content:"Replica unable to accept requests as its ".concat(a,". [View infrastructure settings](/project/").concat(T,"/settings/infrastructure) for more information.")})})]},e.identifier)}return(0,n.jsx)(j.di,{value:e.identifier,className:"cursor-pointer w-full",onSelect:()=>{v.setSelectedDatabaseId(e.identifier),I(!1),m(e.identifier)},onClick:()=>{v.setSelectedDatabaseId(e.identifier),I(!1),m(e.identifier)},children:(0,n.jsxs)("div",{className:"w-full flex items-center justify-between",children:[(0,n.jsx)("p",{children:e.identifier===T?"Primary database":"Read replica (".concat(t," - ").concat(s,")")}),e.identifier===O&&(0,n.jsx)(l.Z,{size:16})]})},e.identifier)})})}),(0,n.jsx)(j.fu,{className:"border-t",children:(0,n.jsx)(j.di,{className:"cursor-pointer w-full",onSelect:()=>{I(!1),S.push("/project/".concat(T,"/settings/infrastructure"))},onClick:()=>I(!1),children:(0,n.jsxs)(d(),{href:"/project/".concat(T,"/settings/infrastructure"),onClick:()=>I(!1),className:"w-full flex items-center gap-2",children:[(0,n.jsx)(u.Z,{size:14,strokeWidth:1.5}),(0,n.jsx)("p",{children:"Create a new read replica"})]})})})]})})})]})}},56302:function(e,t,s){s.d(t,{Z:function(){return n}});let n={list:e=>["project",e,"replicas"],statuses:e=>["project",e,"replicas-statuses"],loadBalancers:e=>["project",e,"load-balancers"]}},92575:function(e,t,s){s.d(t,{b:function(){return c}});var n=s(36492),a=s(99959),r=s(31696),i=s(56302);async function o(e,t){let{projectRef:s}=e;if(!s)throw Error("Project ref is required");let{data:n,error:a}=await (0,r.U2)("/platform/projects/{ref}/databases",{params:{path:{ref:s}},signal:t});return a&&(0,r.S3)(a),n}let c=function(e){let{projectRef:t}=e,{enabled:s=!0,...r}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,n.a)(i.Z.list(t),e=>{let{signal:s}=e;return o({projectRef:t},s)},{enabled:s&&a.Qy&&void 0!==t,...r})}},89523:function(e,t,s){s.d(t,{U:function(){return i},f:function(){return o}});var n=s(75951),a=s(56974),r=s.n(a);let i=e=>{var t;return r()(null!==(t=e.split("-"))&&void 0!==t?t:[])},o=e=>{var t,s;return null===(t=r()(null===(s=n.q_.find(t=>t.region===e))||void 0===s?void 0:s.name.split("(")))||void 0===t?void 0:t.split(")")[0]}}}]);